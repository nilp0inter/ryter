program ::= 'program' identifier ';' block '.' 
identifier ::= letter (letter_or_digit)*
letter_or_digit ::= letter | digit
block ::= label_declaration_part constant_definition_part type_definition_part variable_declaration_part   procedure_and_function_declaration_part statement_part
label_declaration_part ::= empty | 'label' label (',' label)* ';'
label ::= unsigned_integer
constant_definition_part ::= empty | 'const' constant_definition ( ';' constant_definition)* ';' 
constant_definition ::= identifier '=' constant 
constant ::= unsigned_number | sign unsigned_number | constant_identifier | sign constant_identifier | string
unsigned_number ::= unsigned_integer | unsigned_real
unsigned_integer ::= digit (digit)*
unsigned_real ::= unsigned_integer '.' unsigned_integer | unsigned_integer '.' unsigned_integer 'E' scale_factor | unsigned_integer 'E' scale_factor
scale_factor ::= unsigned_integer | sign unsigned_integer
sign ::= '+' | '-'
constant_identifier ::= identifier
string ::= character (character)*
type_definition_part ::= empty | 'type' type_definition (';'type_definition)*';'
type_definition ::= identifier '=' type
type ::= simple_type | structured_type | pointer_type
simple_type ::= scalar_type | subrange_type | type_identifier
scalar_type ::= (identifier (','identifier)*)
subrange_type ::= constant '..' constant
type_identifier ::= identifier
structured_type ::= array_type | record_type | set_type | file_type
array_type ::= 'array' '[' index_type(','index_type)*']' 'of' component_type
index_type ::= simple_type
component_type ::= type
record_type ::= 'record' field_list 'end'
field_list ::= fixed_part | fixed_part ';' variant_part | variant_part
fixed_part ::= record_section (';'record_section)*
record_section ::= field_identifier (',' field_identifier )* ':' type | empty
variant_type ::= 'case' tag_field type_identifier 'of' variant ( ';' variant)*
tag_field ::= field_identifier ':' | empty
variant ::= case_label_list ':' ( field_list ) | empty
case_label_list ::= case_label (',' case_label)*
case_label ::= constant
set_type ::=set 'of' base_type
base_type ::= simple_type
file_type ::= 'file' 'of' type
pointer_type ::= type_identifier
variable_declaration_part ::= empty | 'var' variable_declaration (';' variable_declaration)* ';'
variable_declaration ::= identifier (','identifier)* ':' type
procedure_and_function_declaration_part ::= (procedure_or_function_declaration  ';')*
procedure_or_function_declaration  ::= procedure_declaration  | function_declaration 
procedure_declaration ::= procedure_heading block
procedure_heading ::= 'procedure' identifier ';' | 'procedure' identifier ( formal_parameter_section (';'formal_parameter_section)* )';'
formal_parameter_section ::= parameter_group | 'var' parameter_group | 'function' parameter_group | 'procedure' identifier ( ',' identifier)*
parameter_group ::= identifier (',' identifier)* ':' type_identifier
function_declaration ::= function_heading block
function_heading ::= 'function' identifier ':' result_type ';' | 'function' identifier ( formal_parameter_section (';'formal_parameter_section)* ) ':' result_type ';'
result_type ::= type_identifier
statement_part ::= compund_statement
statement ::= unlabelled_statement | label ':' unlabelled_statement
unlabelled_statement ::= simple_statement | structured_statement
simple_statement ::= assignment_statement | procedure_statement | go_to_statement | empty_statement
assignment_statement ::= variable ':=' expression | function_identifier ':=' expression
variable ::= entire_variable | component_variable | referenced_variable
entire_variable ::= variable_identifier
variable_identifier ::= identifier
component_variable ::= indexed_variable | field_designator | file_buffer
indexed_variable ::= array_variable '[' expression (',' expression)* ']'
array_variable ::= variable
field_designator ::= record_variable '.' field_identifier
record_variable ::= variable
field_identifier ::= identifier
file_buffer ::= file_variable
file_variable ::= variable
referenced_variable ::= pointer_variable
pointer_variable ::= variable
expression ::= simple_expression | simple_expression relational_operator simple_expression
relational_operator ::= '=' | '<>' | '<' | '<=' | '>=' | '>' | 'in'
simple_expression ::= term | sign term| simple_expression adding_operator term
adding_operator ::= '+' | '-' | 'or'
term ::= factor | term multiplying_operator factor
multiplying_operator ::= '*' | '/' | 'div' | 'mod' | 'and'
factor ::= variable | unsigned_constant | ( expression ) | function_designator | set | 'not' factor
unsigned_constant ::= unsigned_number | string | constant_identifier nil
function_designator ::= function_identifier | function_identifier ( actual_parameter (',' actual_parameter)* )
function_identifier ::= identifier
set ::= '[' element_list ']'
element_list ::= element (',' element )* | empty
element ::= expression | expression '..' expression
procedure_statement ::= procedure_identifier | procedure_identifier (actual_parameter (',' actual_parameter )*)
procedure_identifier ::= identifier
actual_parameter ::= expression | variable | procedure_identifier | function_identifier
go_to_statement ::= 'goto' label
empty_statement ::= empty
empty ::=
structured_statement ::= compound_statement | conditional_statement | repetitive_statement | with_statement
compound_statement ::= 'begin' statement (';' statement )* 'end' ';'
conditional_statement ::= if_statement | case_statement
if_statement ::= 'if' expression 'then' statement | 'if' expression 'then' statement 'else' statement
case_statement ::= 'case' expression 'of' case_list_element (';' case_list_element )* 'end'
case_list_element ::= case_label_list ':' statement | empty
case_label_list ::= case_label (',' case_label )*
repetitive_statement ::= while_statement | repeat_statemant | for_statement
while_statement ::= 'while' expression 'do' statement
repeat_statement ::= 'repeat' statement (';' statement)* 'until' expression
for_statement ::= 'for' control_variable ':=' for_list 'do' statement
control_variable ::= identifier
for_list ::= initial_value 'to' final_value | initial_value 'downto' final_value
initial_value ::= expression
final_value ::= expression
with_statement ::= 'with' record_variable_list 'do' statement
record_variable_list ::= record_variable (',' record_variable)*
